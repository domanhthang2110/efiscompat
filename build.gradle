plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.110'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21.1, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                // Iron's Maven - Release
                url "https://code.redspace.io/releases"
            }
        }
        filter {
            includeGroup "io.redspace"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                // Caelus API
                url "https://maven.theillusivec4.top/"
            }
        }
        filter {
            includeGroup "com.illusivesoulworks.caelus"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                // GeckoLib
                url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
            }
        }
        filter {
            includeGroup "software.bernie.geckolib"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                // KosmX's maven (player animator)
                url "https://maven.kosmx.dev/"
            }
        }
        filter {
            includeGroup "dev.kosmx.player-anim"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                // Illusive Soulworks maven (Curios API)
                url "https://maven.theillusivec4.top/"
            }
        }
        filter {
            includeGroup "top.theillusivec4.curios"
        }
    }

    maven { url = "https://maven.enginehub.org/repo/" }
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url = "https://maven.blamejared.com" }
    flatDir {
        dir './libs'
    }
    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
}

dependencies {
    implementation "maven.modrinth:epic-fight:21.12.4"
    implementation "io.redspace:irons_spellbooks:${minecraft_version}-3.14.4"
    localRuntime "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:4.8.2"
    //=========TO tweak and its dependency
    //runtimeOnly fg.deobf("curse.maven:to-tweaks-irons-spells-1046916:6322784")
    //runtimeOnly fg.deobf("curse.maven:lendercataclysm-551586:6370058")
    //runtimeOnly fg.deobf("curse.maven:alexs-caves-924854:5848216")
    //runtimeOnly fg.deobf("curse.maven:apothic-attributes-898963:5634071")
    //runtimeOnly fg.deobf("curse.maven:lionfish-api-1001614:5922047")
    //runtimeOnly fg.deobf("curse.maven:placebo-283644:6274231")
    //runtimeOnly fg.deobf("curse.maven:citadel-331936:6002521")
    //=============================
    //runtimeOnly fg.deobf("curse.maven:curios-309927:5680164")
    //runtimeOnly fg.deobf("curse.maven:embeddium-908741:5681725")
    //runtimeOnly fg.deobf("curse.maven:skinchanger-378549:5848572")
    //runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137938")
    //runtimeOnly fg.deobf("curse.maven:samurai-dynasty-848381:5672395")
    //runtimeOnly fg.deobf("curse.maven:azurelib-817423:5782756")

    // CAELUS *****************************************************************************************************
    localRuntime "com.illusivesoulworks.caelus:caelus-neoforge:7.0.1+1.21.1"

    // PLAYER ANIMATOR ********************************************************************************************
    localRuntime "dev.kosmx.player-anim:player-animation-lib-forge:2.0.1+1.21.1"

    // CURIOS *****************************************************************************************************
    localRuntime "top.theillusivec4.curios:curios-neoforge:9.5.1+1.21.1"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
